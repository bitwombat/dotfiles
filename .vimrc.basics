
filetype on
filetype plugin on

" Make the current directory follow us around
" This breaks tags looking in the cwd for the tags file.  If we start vim at
" the top of a src hierarchy, where tags is, then the lcd breaks that.
" autocmd BufEnter * silent! lcd %:p:h

" HTML tag closing
autocmd FileType html inoremap ><Tab> ><Esc>F<lyt>o</<C-r>"><Esc>O<Space>
autocmd FileType html iabbrev </ </<C-X><C-O>

" Move to match with tab
nmap <tab> %
vmap <tab> %

" Toggle paste mode
set pastetoggle=<F2>

set showmode
set showcmd
set backspace=indent,eol,start
set laststatus=2
set scrolloff=2
set foldmethod=indent

" Without the following, folding doesn't work on php .inc files
set nocompatible
let g:php_folding=1
let g:javaScript_fold=1

syntax on
hi Search ctermbg=4
hi Search ctermfg=7
hi Search cterm=bold
hi IncSearch ctermbg=4
hi IncSearch ctermfg=7
hi IncSearch cterm=NONE

set autowrite

" Feature-related Variables
set backup
set backupdir=/tmp
set complete+=k
set dictionary=/usr/share/dict/words
set noerrorbells
set expandtab
set fileformat=unix
set hlsearch
set ignorecase
set incsearch
set modeline
set ruler
set showmatch
set tabstop=4
:inoremap # X#
set shiftwidth=4
set smartcase
set vb t_vb=
set wrap
set wildmenu
set wildmode=list:longest,full

" Wrapping
set wrap
set textwidth=79
set formatoptions=q
"set colorcolumn=85

" Escape from insert mode with jj
inoremap jj <ESC>

" Leader
let mapleader = " "
nnoremap <leader>n :NERDTree<CR>
nnoremap <leader>p :CtrlPBuffer<CR>
nnoremap <leader>b :BufExplorer<CR><CR>
nnoremap <leader>s :BufExplorerVerticalSplit<CR>

set tags=./tags,tags

" Navigate long lines by screen lines, not file lines
"nnoremap j gj
"nnoremap k gk

" Default to regex searches (not vim expressions)
"nnoremap / /\v
"nnoremap / /\v

syn region myFold start="{" end="}" transparent fold
syn sync fromstart

" Fixing
map F gq}
map T :%s/  *$//g<CR>

" Macroing
map L @l

" IDE
map Q :w<CR>:!clear;python %<CR>
map <F11> :cn<CR>
map <F10> :cN<CR>

" Saving/Quitting
map <F1> :update<CR>
inoremap <F1> <ESC>:update<CR>a
map <C-s> :update<CR>
imap <C-s> <ESC>:update<CR>a
map <C-D> :q<CR>

" Viewing Modes
map <F6> :set invnumber<CR>
map <F7> :if exists("syntax_on") <Bar> syntax off <Bar> <CR> else <Bar> syntax on <Bar> endif <CR>
map <F8> :if &ignorecase <Bar> set noic <Bar> <CR> else <Bar> set ic <Bar> endif <CR>
map <F9> :if &list <Bar> set nolist <Bar> <CR> else <Bar> set list <Bar> endif <CR>

" Buffers
map n :bnext<CR>
map m :bprevious<CR>
" Leftover from old muscle memory (P for previous).  Delete when untrained.
map p :bprevious<CR>

" Tabs
map k :tabnext<CR>
map j :tabprevious<CR>
map c :tabclose<CR>
map t :tabnew<CR>

" Folding
map U zA
map , za

" Ctrl-A copies the entire buffer to the system clipboard
noremap <C-a> <Esc>gg"+yG

    " Ctags {
        set tags=./tags;/,~/.vimtags

        " Make tags placed in .git/tags file available in all levels of a repository
        let gitroot = substitute(system('git rev-parse --show-toplevel'), '[\n\r]', '', 'g')
        if gitroot != ''
            let &tags = &tags . ',' . gitroot . '/.git/tags'
        endif
    " }


    " indent_guides {
        let g:indent_guides_start_level = 2
        let g:indent_guides_guide_size = 1
        let g:indent_guides_enable_on_vim_startup = 1
    " }

    " Strip whitespace {
    function! StripTrailingWhitespace()
        " Preparation: save last search, and cursor position.
        let _s=@/
        let l = line(".")
        let c = col(".")
        " do the business:
        %s/\s\+$//e
        " clean up: restore previous search history, and cursor position
        let @/=_s
        call cursor(l, c)
    endfunction
    " }
