" VIM settings that should always be
"

" Features
filetype on
filetype plugin on
syntax on

set listchars=tab:>.,trail:.,extends:#,nbsp:.,eol:$
" Someday when I switch to a better terminal program, try these
"set listchars=tab:‚Üπ¬∑,extends:‚áâ,precedes:‚áá,nbsp:‚ê†,trail:‚ê†,nbsp:‚ê£

set tags=./tags,tags

" Make the current directory follow us around
" This breaks tags looking in the cwd for the tags file.  If we start vim at
" the top of a src hierarchy, where tags is, then the lcd breaks that.
" autocmd BufEnter * silent! lcd %:p:h

set pastetoggle=<F2>
set backspace=indent,eol,start

" Visual settings
set hlsearch
set laststatus=2
set modeline
set ruler
set showcmd
set showmatch
set showmode

" Folding settings
set foldmethod=indent
syn region myFold start="{" end="}" transparent fold
syn sync fromstart

" Without the following, folding doesn't work on php .inc files
set nocompatible
let g:php_folding=1
let g:javaScript_fold=1

" Search settings
hi Search ctermbg=4
hi Search ctermfg=7
hi Search cterm=bold
hi IncSearch ctermbg=4
hi IncSearch ctermfg=7
hi IncSearch cterm=NONE


" Feature-related Variables
set autowrite
set backup
set backupdir=/tmp
set complete+=k
set dictionary=/usr/share/dict/words
set noerrorbells
set fileformat=unix
set ignorecase
set incsearch
set scrolloff=2
set smartcase
set vb t_vb=
set wildmenu
set wildmode=list:longest,full

" Editor behaviour
set tabstop=4
set shiftwidth=4
set wrap
set textwidth=79
set formatoptions=q
set expandtab
"set colorcolumn=85

" Make it obvious in gvim when we have focus
" (unfortunately, this makes it re-fold the code on reentry)
":au FocusLost * syntax off
":au FocusGained * syntax on

" GUI options {
    set guioptions-=m
    set guioptions-=T
    "set guifont=Andale\ Mono\ 10
    set guifont=Source\ Code\ Pro\ 11
    set guioptions-=r
    :amenu Edit.Paste\ from\ select  "*P
" }

" Fix error highlighting in terminal
highlight clear SpellBad
highlight SpellBad term=standout ctermfg=1 term=underline cterm=underline

" Ctags {
    set tags=./tags;/,~/.vimtags

    " Make tags placed in .git/tags file available in all levels of a repository
    let gitroot = substitute(system('git rev-parse --show-toplevel'), '[\n\r]', '', 'g')
    if gitroot != ''
        let &tags = &tags . ',' . gitroot . '/.git/tags'
    endif
" }


" Keys
let mapleader = " "
nnoremap <leader>n :NERDTree<CR>
nnoremap <leader>p :CtrlPBuffer<CR>
nnoremap <leader>b :BufExplorer<CR><CR>
nnoremap <leader>s :BufExplorerVerticalSplit<CR>
nnoremap <leader>c :cd %:h

" Move to match with tab
nmap <tab> %
vmap <tab> %

" Escape from insert mode with jj
inoremap jj <ESC>

" Navigate long lines by screen lines, not file lines
"nnoremap j gj
"nnoremap k gk

" Default to regex searches (not vim expressions)
"nnoremap / /\v
"nnoremap / /\v

" Yank from the cursor to the end of the line, to be consistent with C and D.
nnoremap Y y$

" Fixing
map F gq}
map T :%s/  *$//g<CR>

" Macroing
map L @l

" IDE
map Q :w<CR>:!clear;python %<CR>
map <F11> :cn<CR>
map <F10> :cN<CR>

" Saving/Quitting
map <F1> :update<CR>
inoremap <F1> <ESC>:update<CR>a
map <C-s> :update<CR>
imap <C-s> <ESC>:update<CR>a
map <C-D> :q<CR>

" Viewing Modes
map <F6> :set invnumber<CR>
map <F7> :if exists("syntax_on") <Bar> syntax off <Bar> <CR> else <Bar> syntax on <Bar> endif <CR>
map <F8> :if &ignorecase <Bar> set noic <Bar> <CR> else <Bar> set ic <Bar> endif <CR>
map <F9> :if &list <Bar> set nolist <Bar> <CR> else <Bar> set list <Bar> endif <CR>

" Buffers
map n :bnext<CR>
map m :bprevious<CR>
" Leftover from old muscle memory (P for previous).  Delete when untrained.
map p :bprevious<CR>

" Tabs
map k :tabnext<CR>
map j :tabprevious<CR>
map c :tabclose<CR>
map t :tabnew<CR>

" Folding
map U zA
map , za

" Ctrl-A copies the entire buffer to the system clipboard
noremap <C-a> <Esc>gg"+yG
