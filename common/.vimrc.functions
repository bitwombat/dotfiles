" Close all other buffers {
command! BufOnly silent! execute "%bd|e#|bd#"
" }


" Much faster paste from selection clipboard {
function! PasteSel()
    .!xclip -o -selection p
endfunction
" }

" Clean up paste from Slack {
function! SlackClean()
    %s/\%ufffc//g
    %s/(edited)//g
endfunction
" }

" Strip whitespace {
function! StripTrailingWhitespace()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " do the business:
    %s/\s\+$//e
    " clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction
" }

" Better tabbing / completion
function! SuperCleverTab()
    if strpart(getline('.'), 0, col('.') - 1) =~ '^\s*$'
        return "\<Tab>"
    else
        if &omnifunc != ''
            return "\<C-X>\<C-O>"
        elseif &dictionary != ''
            return "\<C-N>"
        else
            return "\<C-N>"
        endif
    endif
endfunction
inoremap <Tab> <C-R>=SuperCleverTab()<cr>

" Format HTML
function! PrettyHTML()
    set smartindent
    filetype indent on
    set sw=2
    set ft=html
    %s/>/>\r/g
    %s/<\//\r<\//g
    g/^\s*$/d
    normal gg=G
endfunction
command! PrettyHTML call PrettyHTML()

function! ClearRegs()
    let regs=split('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789/-"', '\zs')
    for r in regs
        call setreg(r, [])
    endfor
endfunction
command! ClearRegs call ClearRegs()

" This was originally made for use by a command to create a new Hugo blog post
" I decided expand("<cword>") was more useful, but leaving this function here
" because it was a bit of work and should come in handy in the future.
" Based on the multi-line supporting function at
" https://stackoverflow.com/a/6271254/3713234
"
function! GetVisualSelection()
    let column_start = getpos("'<")[2]
    let column_end = getpos("'>")[2]
    let line = getline(".")
    return line[column_start - 1 : column_end - 2]
endfunction
