call pathogen#infect()

" CtrlP {{{
let g:ctrlp_use_caching = 1
let g:ctrlp_working_path_mode = 0
let g:ctrlp_match_window = 'bottom,order:btt,min:1,max:20,results:20'
" }}}

" Omnifunc {{{
autocmd FileType python set omnifunc=pythoncomplete#Complete
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
" }}}

" Syntastic {{{
let g:syntastic_php_checkers=['php', 'phpcs']
let g:syntastic_php_phpcs_args='--standard=PSR2 -n'

let g:syntastic_javascript_checkers=['eslint']

" W503 and W504 are mutually exclusive. We want a complaint for a newline after
" a binary operator, not before.
let g:syntastic_python_flake8_args="--select=E,W --ignore=W503"

let g:syntastic_css_csslint_args="--errors=known-properties,duplicate-background-images,duplicate-properties"

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
" }}}

" Vdebug  {{{
let g:vdebug_options={}
let g:vdebug_options['port']=10000
let g:vdebug_options['ide_key']='PHPSTORM'
" }}}

" NERDTree {{{
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
" Temporary because of a bug
let g:NERDTreeDirArrows=1
let g:NERDTreeDirArrowExpandable='>'
let g:NERDTreeDirArrowCollapsible='v'
let NERDTreeShowBookmarks=1
let NERDTreeIgnore=['\.pyc', '\~$', '\.swo$', '\.swp$', '\.git', '\.hg', '\.svn', '\.bzr']
let NERDTreeChDirMode=0
let NERDTreeQuitOnOpen=1
let NERDTreeMouseMode=2
let NERDTreeShowHidden=1
let NERDTreeKeepTreeInNewTab=1
let g:nerdtree_tabs_open_on_gui_startup=0
" }}}

" Ack {{{
" Run with :Ack
" Tell it to use ag
let g:ackprg = 'ag --vimgrep'
cnoreabbrev ag Ack
" }}}

" wordmotion {{{
nnoremap dw de
nnoremap cw ce
" }}}

" vim-closetag  {{{
let g:closetag_filenames = '*.html,*.xhtml,*.phtml'
" }}}

" lightline  {{{
let g:lightline = {
    \ 'colorscheme': 'bitwombat',
    \ 'active': {
    \   'left': [ [ 'mode', 'paste' ],
    \             [ 'filename', 'readonly', 'modified' ],
    \             [ 'gitbranch' ],
    \           ],
    \   'right': [
    \             [ 'percent' ],
    \             [ 'lineinfo' ],
    \            ],
    \ },
    \ 'component_function': {
    \   'readonly': 'LightlineReadonly',
    \   'filename': 'LightlineFilename',
    \   'gitbranch': 'fugitive#head',
    \   'fileformat': 'LightlineFileformat',
    \   'fileencoding': 'LightlineFileencoding',
    \ },
    \ }

function! LightlineReadonly()
  return &readonly && &filetype !=# 'help' ? 'RO' : ''
endfunction

function! LightlineFilename()
  let fname = expand('%:t')
  let ftype =  &filetype !=# '' ? &filetype : 'no ft'
  return fname . ' (' . ftype . ')'
endfunction

function! LightlineFileencoding()
  let encoding = &fenc !=# '' ? &fenc : &enc
  return encoding !=# 'utf-8' ? encoding : ''
endfunction

function! LightlineFileformat()
  return &fileformat !=# 'unix' ? &fileformat : ''
endfunction
" }}}

" gutentags {{{
set statusline+=%{gutentags#statusline()}
let g:gutentags_ctags_exclude=['node_modules','vendor']
let g:gutentags_exclude_project_root=['/home/gbell2']
" }}}
"
" vim:foldmethod=marker:foldlevel=0
