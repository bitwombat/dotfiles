
augroup ruby
    autocmd BufReadPost,FileReadPost *.rb  set tabstop=2
    autocmd BufReadPost,FileReadPost *.rb  set softtabstop=2
augroup END

augroup yml
    autocmd BufReadPost,FileReadPost *.yml  set tabstop=2
    autocmd BufReadPost,FileReadPost *.yml  set nofoldenable
augroup END

augroup python
    autocmd BufReadPost,FileReadPost *.py  set foldmethod=syntax
    autocmd BufReadPost,FileReadPost *.py  set keywordprg=pydoc
    " Make the 81st column stand out
    autocmd BufReadPost,FileReadPost *.py  highlight ColorColumn ctermbg=yellow
    autocmd BufReadPost,FileReadPost *.py  call matchadd('ColorColumn', '\%81v', 100)
augroup END

" Without the fileytype=html, =G reformatting doesn't work, even though
" filetype seems to get set to html without it.
augroup html
    autocmd BufReadPost,FileReadPost *.html,*.phtml set sw=2
    autocmd BufReadPost,FileReadPost *.html,*.phtml set foldmethod=syntax
    autocmd BufReadPost,FileReadPost *.html,*.phtml filetype indent on
    autocmd BufReadPost,FileReadPost *.html,*.phtml set smartindent
    autocmd BufReadPost,FileReadPost *.html,*.phtml set filetype=html
    autocmd BufReadPost,FileReadPost *.html,*.phtml abbreviate sph <?php
    autocmd BufReadPost,FileReadPost *.html,*.phtml abbreviate eph ?>
augroup END

" /usr/share/vim/vim74/syntax/markdown.vim calls javascript.vim which sets
" foldmethod to syntax.  Set it back to what ftplugin/markdown.vim needs to
" work right.
augroup markdown
    autocmd BufNewFile,BufReadPost *.md set filetype=markdown
    autocmd BufNewFile,BufReadPost *.md set foldmethod=expr
    autocmd BufNewFile,BufReadPost *.md let g:markdown_folding=1
augroup END

augroup css
    autocmd BufReadPost,FileReadPost *.css  set foldmethod=syntax
    autocmd BufReadPost,FileReadPost *.css  set keywordprg=:help
    autocmd BufReadPost,FileReadPost *.css  set iskeyword+=-
augroup END

augroup text
    autocmd BufRead,BufNewFile       *.txt colorscheme zenburn
augroup END

augroup pptx
    autocmd BufRead,BufNewFile       outline.txt set noexpandtab
    autocmd BufRead,BufNewFile       outline.txt set fileformat=dos
    autocmd BufRead,BufNewFile       outline.txt iunmap <Tab>
augroup END 

augroup cpp
    autocmd BufReadPost,FileReadPost *.h  set foldmethod=syntax
    autocmd BufReadPost,FileReadPost *.cpp  syn region myFold start="{" end="}" transparent fold
    autocmd BufReadPost,FileReadPost *.cpp  syn sync fromstart
    autocmd BufReadPost,FileReadPost *.cpp  set foldmethod=syntax
augroup END

augroup php
    autocmd BufReadPost,FileReadPost *.php  abbreviate sph <?php
    autocmd BufReadPost,FileReadPost *.php  abbreviate eph ?>
    autocmd BufReadPost,FileReadPost *.php  nnoremap <silent><buffer> K <Esc>:silent! call system("phpdoc " . expand('<cword>'))<CR>
augroup END

augroup js
    autocmd BufReadPost,FileReadPost *.js set tabstop=2
    autocmd BufReadPost,FileReadPost *.js set autoindent
    autocmd BufReadPost,FileReadPost *.js set smartindent
augroup END

augroup james
    autocmd BufReadPost,FileReadPost */deit/*.php set noexpandtab
    autocmd BufReadPost,FileReadPost */uf_checkout/*/src/*.php set noexpandtab
augroup END

augroup bookmarks
    autocmd VimLeavePre Bookmarks.txt call ClearRegs()
augroup END

" vim -b : edit binary using xxd-format!
augroup binary
  au!
  au BufReadPre  *.bin let &bin=1
  au BufReadPost *.bin if &bin | %!xxd
  au BufReadPost *.bin set ft=xxd | endif
  au BufWritePre *.bin if &bin | %!xxd -r
  au BufWritePre *.bin endif
  au BufWritePost *.bin if &bin | %!xxd
  au BufWritePost *.bin set nomod | endif
augroup END

" Transparent editing of gpg encrypted files.
" By Wouter Hanegraaff <wouter@blub.net>
augroup encrypted
    au!
    autocmd BufReadPre,FileReadPre      *.gpg set viminfo=
    autocmd BufReadPre,FileReadPre      *.gpg set noswapfile
    autocmd BufReadPre,FileReadPre      *.gpg set bin
    autocmd BufReadPre,FileReadPre      *.gpg let ch_save = &ch|set ch=2
    autocmd BufReadPost,FileReadPost    *.gpg '[,']!gpg --decrypt 2> /dev/null
    autocmd BufReadPost,FileReadPost    *.gpg set nobin
    autocmd BufReadPost,FileReadPost    *.gpg let &ch = ch_save|unlet ch_save
    autocmd BufReadPost,FileReadPost    *.gpg execute ":doautocmd BufReadPost " . expand("%:r")
    autocmd BufWritePre,FileWritePre    *.gpg set bin
    autocmd BufWritePre,FileWritePre    *.gpg '[,']!gpg --encrypt --recipient "greg@bitwombat.com.au"  2>>/dev/null
    autocmd BufWritePost,FileWritePost  *.gpg u
    autocmd BufWritePost,FileWritePost  *.gpg set nobin
augroup END


